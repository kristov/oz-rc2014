>DIAG "---- TESTING WRITES ----"
>DIAG "Push one byte into the buffer"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    ld a, 0xaf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0x0000 "Return code correct"
>MEM 0x100 "Queue status"
0x0f 0x00 0x01
0xaf 0x00


>DIAG "Push 2 items into the ring buffer"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    ld a, 0xaf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    ld a, 0xbf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0x0000 "Return code correct"
>MEM 0x100 "Queue data filled with correct bytes"
0x0f 0x00 0x02
0xaf 0xbf 0x00


>DIAG "Push 1 item into the ring buffer when its almost full"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    ld a, 0xaf              ; load test value
    ld hl, kq_addr          ; load the start of the table
    ld b, 0x0e              ; write 14 bytes
loop:
    ld (hl), a              ; write the byte
    inc hl                  ; move to the next one
    djnz loop               ; jump to the loop
    ld hl, kq_pwrite        ; load the write index
    ld a, 0x0e              ; set it to 14
    ld (hl), a              ; save it

; Now put the last byte into the buffer. This should succeed.
    ld a, 0xbf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0x0000 "Return code correct"
>MEM 0x100 "Queue data filled with 15 bytes"
0x0f 0x00 0x0f
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xbf 0x00


>DIAG "Fail to insert byte when write pointer is 14"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    ld a, 0xaf              ; load test value
    ld hl, kq_addr          ; load the start of the table
    ld b, 0x0f              ; write 15 bytes
loop:
    ld (hl), a              ; write the byte
    inc hl                  ; move to the next one
    djnz loop               ; jump to the loop
    ld hl, kq_pwrite        ; load the write index
    ld a, 0x0f              ; set it to 15
    ld (hl), a              ; save it

; Now put the last byte into the buffer. This should fail because it would
; leave the write pointer and read pointer equal.
    ld a, 0xbf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0xffff "Return code indicates failure"
>MEM 0x100 "Queue data was not changed"
0x0f 0x00 0x0f
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0x00


>DIAG "Insert byte when write pointer is 15 and read is 1"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    ld hl, kq_pread         ; load the read index location
    ld a, 0x01              ; set it to 1
    ld (hl), a              ; save it

    ld a, 0xaf              ; load test value
    ld hl, kq_addr          ; load the start of the table
    ld b, 0x0f              ; write 15 bytes
loop:
    ld (hl), a              ; write the byte
    inc hl                  ; move to the next one
    djnz loop               ; jump to the loop
    ld hl, kq_pwrite        ; load the write index location
    ld a, 0x0f              ; set it to 15
    ld (hl), a              ; save it

; Now put the last byte into the buffer. This should fail because it would
; leave the write pointer and read pointer equal.
    ld a, 0xbf              ; load test value
    ld b, a                 ; put it into b
    push bc                 ; push bc onto the 
    call rb_writeb          ; call write function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0x0000 "Return code indicates success"
>MEM 0x100 "Queue data filled with 16 bytes"
0x0f 0x01 0x00
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xaf
0xaf 0xaf 0xaf 0xbf

>DIAG "---- TESTING READS ----"
>DIAG "Fail to read an empty queue"
>RESET
>INCLUDE "init_16_buf.asm"
>CODE
main:
    call rb_readb           ; call read function

    halt                    ; end the test

>INCLUDE "../04-ringbuf.asm"
>RUN
>REG HL 0xffff "Return code indicates failure"
>MEM 0x100 "Queue status"
0x0f 0x00 0x00
0x00 0x00

